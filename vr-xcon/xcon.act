import net
import time
import file

actor Healthcheck(write_file_cap, expected, trace):
    # keep track of TcpEndpoint actor states (ids, like "r1/1")
    var states = {}
    # Single actor for writing to the file to ensure the updates are flushed in
    # the same order as they are received by Healthcheck.
    var wf = file.WriteFile(write_file_cap, "health")

    def update(endpoint, state):
        states[endpoint] = state
        _flush()

    def _flush():
        count = 0
        for state in states.values():
            if state == 3:
                count += 1
        if count == expected:
            exit_code = 0
            message = "All %d sockets connected" % expected
        else:
            exit_code = 1
            message = "Expected %d sockets but only %d connected" % (expected, count)
        print("healthcheck: %d (%s)" % (exit_code, message))
        if trace:
           print("state", states)

        health = "%d\n%s" % (exit_code, message)
        wf.write(health.encode())

    _flush()

actor TcpEndpoint(connect_cap, dns_cap, name, interface, healthcheck, trace):
    port = 10000 + interface
    id = "%s/%d" % (name, interface)
    var _other = None
    var _conn: ?net.TCPConnection = None
    var backoff = 0
    var state = 0
    # 0 = starting / waiting / backoff
    # 1 = wait for DNS
    # 2 = wait for connection
    # 3 = connected

    def _set_state(s):
        state = s
        healthcheck.update(id, state)

    def _on_tcp_connect(c):
        _set_state(3)
        print("TCP Client connection established to %s" % (id))
        backoff = 0

    # We need not declare the type of the data parameter as it should be
    # inferred automatically as __builtin__.bytes. This avoids
    # https://github.com/actonlang/acton/issues/1717
    def _on_tcp_receive(c, data: bytes):
        if _other is not None:
            _other.write(data)
            if trace:
                print("%s -> %s: %d bytes" % (id, _other.id, len(data)))

    def _on_tcp_close(c):
        pass

    def _on_tcp_error(c, msg):
        print("Error for %s" % (id))
        _reconnect(True)

    def _on_dns_resolve(resolved_addresses):
        if state != 1:
            print("Got unexpected DNS response, discarding...")
        else:
            if len(resolved_addresses) > 0:
                addr = resolved_addresses[0]
                print("Resolved %s to %s" % (name, addr))
                # TODO: could potentially use .reconnect() here unless the
                # resolved address has changed, instead of closing current
                # connection and replacing it with a new one. The connection
                # must currently be explicitly closed to clean up resources in
                # the I/O subsystem.
                if _conn is not None:
                    _conn.close(_on_tcp_close)
                _conn = net.TCPConnection(connect_cap, addr, port, _on_tcp_connect, _on_tcp_receive, _on_tcp_error)
                _set_state(2)

    def _on_dns_error(query, error):
        print("Error resolving DNS name", query, ":", error)
        _reconnect(True)

    def _connect():
        if state != 0:
            print("Unexpected state for _connect:", state)
            return
        _set_state(1)
        net.lookup_a(dns_cap, name, _on_dns_resolve, _on_dns_error)

    def _reconnect(error):
        _set_state(0)
        if error:
            backoff = min([backoff + 1.0, 5.0], 1.0)
        after backoff: _connect()

    _reconnect(False)

    def set_other(o):
        _other = o

    def write(data):
        if _conn is not None:
            _conn.write(data)


def parse_side(i):
    parts = i.split("/", None)
    if len(parts) != 2:
        raise ValueError("Bad endpoint definition: %s" % i)
    return (host=parts[0], interface=int(parts[1]))



actor main(env):
    print("Xcon starting up")
    connect_cap = net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap)))
    dns_cap = net.DNSCap(net.NetCap(env.cap))
    var i = 0
    var p2p = []
    var trace = False
    while i < len(env.argv):
        arg = env.argv[i]
        print("arg: %s" % (arg))
        # the --p2p arugment is followed by one or more link specs (python
        # argparse nargs="+")
        # TODO: use the argparse module here and *remove* support for this
        # ambiguous behavior: https://github.com/actonlang/acton/issues/1730
        if arg == "--p2p":
            i += 1
            while i < len(env.argv) and env.argv[i][0] != "-":
                arg_link = env.argv[i]
                print("\t%s" % arg_link)
                parts = arg_link.split("--", None)
                if len(parts) != 2:
                    print("Bad link", arg_link)
                link = (
                    left=parse_side(parts[0]),
                    right=parse_side(parts[1])
                    )
                p2p.append(link)
                i += 1
            i -= 1
        elif arg == "--trace":
            trace = True
        i += 1

    wfc = file.WriteFileCap(file.FileCap(env.cap))
    hc = Healthcheck(wfc, len(p2p) * 2, trace)

    var links = []
    for link in p2p:
        left = link.left
        right = link.right
        left_ep = TcpEndpoint(connect_cap, dns_cap, right.host, right.interface, hc, trace)
        right_ep = TcpEndpoint(connect_cap, dns_cap, left.host, left.interface, hc, trace)
        left_ep.set_other(right_ep)
        right_ep.set_other(left_ep)
        links.append((left=left, right=right))
